Adattare al codice pre esistente

Inserire chiamata a edit distance

togliere vectors e mettere new unsigned*

Trovare algoritmo per selezionare i migliori individui tra parents+children

Anziché avere due array, provare ad usare un singolo array diviso da due indici per indicare dove finiscono i parents e dove finiscono i children
[ parents | children]
  <---->    <----> 
   mu        lambda
   
Creare variante (1+1)-ES che usa l'enanched diagonal ed

Per le varianti (1+1)-ES e (1+lambda)-ES fare in modo che, se dopo N generazioni non migliora, stoppare tutto, oppure fare uno shuffle del figlio completamente casuale

Prendi dei campioni ogni 100 generazioni e traccia un grafico nei punti in cui sei migliorato.
Se dopo aver speso G generazioni, dall'ultimo in cui hai migliorato, il return on investment (efficienza economica) è al disotto di un certo margine dato a priori in input, stoppa tutto.
Tratto da un esempio reale con (1+1)-ES_RS
MPED   ms  generazioni
353  4796         5000
358   968         1000
358   468          500
365    93          100
365    46           50

Vai avanti finché la tua efficienza economica si mantiene sopra un threshold dato in input, se scende al disotto, fermati


Trovare rapporto ottimale padre e figli per (mu+lambda)-ES FONTE: introduction to ES. mu/lambda= 0.270

Se si potesse salvare il calcolo dell'edit distance per un dato matching schema, anziché calcolarlo ogni volta, sarebbe ottimo.
Associo un id ad ogni oggetto MS, lo inserisco in un tree set se non l'ho già inserito, quando crei un figlio, come fai a sapere se è diverso rispetto ad un altro? 
Controlli la permutazione, potrebbe essere meno costoso controllare N permutazioni, che non calcolare l'edit distance per quel MS
IDEA:
Ogni MS ha uno storico degli swap effettuati su sigma1 e uno storico su sigma2. Se sto facendo uno swap su un array che è già stato effettuato non lo faccio
e faccio un altro swap. Uno swap è identificato da 4 valori unsigned costanti: indiceP-valoreP <-> indiceA-valoreA (P=Partenza, A=Arrivo). 
Problema: forse funziona solo con p1=p2=1. Inoltre forse bisognerebbe considerare entrambi gli array in contemporanea anziché considerare fare uno per volta

